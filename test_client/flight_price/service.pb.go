// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package flight_price

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PriceClient is the client API for Price service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PriceClient interface {
	GetCityCheapestPrice(ctx context.Context, in *CityCheapestPriceRequest, opts ...grpc.CallOption) (*CityCheapestPriceReply, error)
}

type priceClient struct {
	cc *grpc.ClientConn
}

func NewPriceClient(cc *grpc.ClientConn) PriceClient {
	return &priceClient{cc}
}

func (c *priceClient) GetCityCheapestPrice(ctx context.Context, in *CityCheapestPriceRequest, opts ...grpc.CallOption) (*CityCheapestPriceReply, error) {
	out := new(CityCheapestPriceReply)
	err := c.cc.Invoke(ctx, "/flight.price.Price/GetCityCheapestPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceServer is the server API for Price service.
type PriceServer interface {
	GetCityCheapestPrice(context.Context, *CityCheapestPriceRequest) (*CityCheapestPriceReply, error)
}

func RegisterPriceServer(s *grpc.Server, srv PriceServer) {
	s.RegisterService(&_Price_serviceDesc, srv)
}

func _Price_GetCityCheapestPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityCheapestPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceServer).GetCityCheapestPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flight.price.Price/GetCityCheapestPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceServer).GetCityCheapestPrice(ctx, req.(*CityCheapestPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Price_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flight.price.Price",
	HandlerType: (*PriceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCityCheapestPrice",
			Handler:    _Price_GetCityCheapestPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_1729ee16dd0ad174) }

var fileDescriptor_service_1729ee16dd0ad174 = []byte{
	// 113 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x49, 0xcb, 0xc9, 0x4c, 0xcf,
	0x28, 0xd1, 0x2b, 0x28, 0xca, 0x4c, 0x4e, 0x95, 0xe2, 0x06, 0x53, 0x10, 0x29, 0xa3, 0x5c, 0x2e,
	0xd6, 0x00, 0x10, 0x57, 0x28, 0x85, 0x4b, 0xc4, 0x3d, 0xb5, 0xc4, 0x39, 0xb3, 0xa4, 0xd2, 0x39,
	0x23, 0x35, 0xb1, 0x20, 0xb5, 0xb8, 0x04, 0x22, 0xae, 0xa6, 0x87, 0xac, 0x59, 0x0f, 0x43, 0x41,
	0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x94, 0x0a, 0x41, 0x75, 0x05, 0x39, 0x95, 0x49, 0x6c,
	0x60, 0x5b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x78, 0x80, 0x68, 0xa1, 0x00, 0x00,
	0x00,
}
